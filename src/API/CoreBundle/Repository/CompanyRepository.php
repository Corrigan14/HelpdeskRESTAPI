<?php

namespace API\CoreBundle\Repository;

use API\CoreBundle\Entity\Company;
use API\TaskBundle\Entity\CompanyData;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Traits\CompanyRepositoryTrait;

/**
 * CompanyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CompanyRepository extends EntityRepository
{
    const LIMIT = 10;

    use CompanyRepositoryTrait;

    /**
     * Return all entities with specific conditions based on actual Entity
     *
     * @param int $page
     *
     * @param array $options
     *
     * @return mixed
     */
    public function getAllEntities(int $page, array $options = [])
    {
        $isActive = $options['isActive'];

        if ('true' === $isActive || 'false' === $isActive) {
            if ($isActive === 'true') {
                $isActiveParam = 1;
            } else {
                $isActiveParam = 0;
            }
            $query = $this->createQueryBuilder('c')
                ->select('c,companyData, companyAttribute')
                ->leftJoin('c.companyData', 'companyData')
                ->leftJoin('companyData.companyAttribute', 'companyAttribute')
                ->where('c.is_active = :isActiveParam')
                ->orderBy('c.id')
                ->distinct()
                ->setParameter('isActiveParam', $isActiveParam)
                ->getQuery();
        } else {
            $query = $this->createQueryBuilder('c')
                ->select('c,companyData, companyAttribute')
                ->leftJoin('c.companyData', 'companyData')
                ->leftJoin('companyData.companyAttribute', 'companyAttribute')
                ->orderBy('c.id')
                ->distinct()
                ->getQuery();
        }

        // Pagination
        if (1 < $page) {
            $query->setFirstResult(self::LIMIT * $page - self::LIMIT);
        } else {
            $query->setFirstResult(0);
        }

        $query->setMaxResults(self::LIMIT);

        $paginator = new Paginator($query, $fetchJoinCollection = true);
        $count = $paginator->count();

        return [
            'count' => $count,
            'array' => $this->formatData($paginator)
        ];
    }

    /**
     * Return one full entity
     *
     * @param int $id
     * @return mixed
     */
    public function getEntity(int $id)
    {
        $query = $this->createQueryBuilder('c')
            ->select('c,companyData, companyAttribute')
            ->leftJoin('c.companyData', 'companyData')
            ->leftJoin('companyData.companyAttribute', 'companyAttribute')
            ->where('c.id = :companyId')
            ->setParameter('companyId', $id)
            ->getQuery();

        return $this->processData($query->getSingleResult());
    }

    /**
     * @param string|bool $term
     * @param int $page
     * @param string|bool $isActive
     * @return array
     */
    public function getCompaniesSearch($term, int $page, $isActive):array
    {
        $parameters = [];
        if ('true' === $isActive || 'false' === $isActive) {
            if ($isActive === 'true') {
                $isActiveParam = 1;
            } else {
                $isActiveParam = 0;
            }
            $query = $this->createQueryBuilder('c')
                ->select('c,companyData, companyAttribute')
                ->leftJoin('c.companyData', 'companyData')
                ->leftJoin('companyData.companyAttribute', 'companyAttribute')
                ->where('c.is_active = :isActiveParam')
                ->orderBy('c.id')
                ->distinct();
            $parameters['isActiveParam'] = $isActiveParam;
        } else {
            $query = $this->createQueryBuilder('c')
                ->select('c,companyData, companyAttribute')
                ->leftJoin('c.companyData', 'companyData')
                ->leftJoin('companyData.companyAttribute', 'companyAttribute')
                ->orderBy('c.id')
                ->distinct();
        }

        if ($term) {
            $query->andWhere('c.title LIKE :term');
            $parameters['term'] = '%' . $term . '%';
        }

        $query->setParameters($parameters);

        // Pagination
        if (1 < $page) {
            $query->setFirstResult(self::LIMIT * $page - self::LIMIT);
        } else {
            $query->setFirstResult(0);
        }

        $query->setMaxResults(self::LIMIT);

        $paginator = new Paginator($query, $fetchJoinCollection = true);
        $count = $paginator->count();

        return [
            'count' => $count,
            'array' => $this->formatData($paginator)
        ];
    }

    /**
     * @return array
     */
    public function getAllCompanyEntitiesWithIdAndTitle()
    {
        $query = $this->createQueryBuilder('company')
            ->select('company.id,  company.title')
            ->where('company.is_active = :isActive')
            ->setParameter('isActive', true);

        return $query->getQuery()->getArrayResult();
    }

    /**
     * @param $paginatorData
     * @return array
     */
    private function formatData($paginatorData):array
    {
        $response = [];
        /** @var Company $data */
        foreach ($paginatorData as $data) {
            $response[] = $this->processData($data);
        }

        return $response;
    }

    /**
     * @param Company $data
     * @return array
     */
    private function processData(Company $data):array
    {
        $companyData = $data->getCompanyData();
        $companyDataArray = [];
        if (count($companyData) > 0) {
            /** @var CompanyData $item */
            foreach ($companyData as $item) {
                $companyDataArray[] = [
                    'id' => $item->getId(),
                    'value' => $item->getValue(),
                    'companyAttribute' => [
                        'id' => $item->getCompanyAttribute()->getId(),
                        'title' => $item->getCompanyAttribute()->getTitle(),
                    ]
                ];
            }
        }

        $response = [
            'id' => $data->getId(),
            'title' => $data->getTitle(),
            'ico' => $data->getIco(),
            'dic' => $data->getDic(),
            'ic_dph' => $data->getIcDph(),
            'street' => $data->getStreet(),
            'city' => $data->getCity(),
            'zip' => $data->getZip(),
            'country' => $data->getCountry(),
            'is_active' => $data->getIsActive(),
            'companyData' => $companyDataArray
        ];

        return $response;
    }
}
