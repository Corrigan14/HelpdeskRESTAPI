<?php

namespace API\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Traits\CompanyRepositoryTrait;

/**
 * CompanyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CompanyRepository extends EntityRepository
{
    const LIMIT = 10;

    use CompanyRepositoryTrait;

    /**
     * Return all entities with specific conditions based on actual Entity
     *
     * @param int $page
     *
     * @param array $options
     *
     * @return mixed
     */
    public function getAllEntities(int $page, array $options = [])
    {
        $isActive = $options['isActive'];

        if ('true' === $isActive || 'false' === $isActive) {
            if ($isActive === 'true') {
                $isActiveParam = 1;
            } else {
                $isActiveParam = 0;
            }
            $query = $this->createQueryBuilder('c')
                ->select('c,companyData, companyAttribute')
                ->leftJoin('c.companyData', 'companyData')
                ->leftJoin('companyData.companyAttribute', 'companyAttribute')
                ->where('c.is_active = :isActiveParam')
                ->setParameter('isActiveParam', $isActiveParam)
                ->getQuery();
        } else {
            $query = $this->createQueryBuilder('c')
                ->select('c,companyData, companyAttribute')
                ->leftJoin('c.companyData', 'companyData')
                ->leftJoin('companyData.companyAttribute', 'companyAttribute')
                ->getQuery();
        }

        $query->setMaxResults(self::LIMIT);

        /**
         * Pagination calculating offset
         */
        if (1 < $page) {
            $query->setFirstResult(self::LIMIT * $page - self::LIMIT);
        }

        return $query->getArrayResult();
    }

    /**
     * Return one full entity
     *
     * @param int $id
     * @return mixed
     */
    public function getEntity(int $id)
    {
        $query = $this->createQueryBuilder('c')
            ->select('c,companyData, companyAttribute')
            ->leftJoin('c.companyData', 'companyData')
            ->leftJoin('companyData.companyAttribute', 'companyAttribute')
            ->where('c.id = :companyId')
            ->setParameter('companyId', $id)
            ->getQuery();

        return $query->getArrayResult();
    }

    /**
     * @param string|bool $term
     * @param int $page
     * @param string|bool $isActive
     * @return array
     */
    public function getCompaniesSearch($term, int $page, $isActive):array
    {
        $parameters = [];
        if ('true' === $isActive || 'false' === $isActive) {
            if ($isActive === 'true') {
                $isActiveParam = 1;
            } else {
                $isActiveParam = 0;
            }
            $query = $this->createQueryBuilder('c')
                ->select('c,companyData, companyAttribute')
                ->leftJoin('c.companyData', 'companyData')
                ->leftJoin('companyData.companyAttribute', 'companyAttribute')
                ->where('c.is_active = :isActiveParam');
            $parameters['isActiveParam'] = $isActiveParam;
        } else {
            $query = $this->createQueryBuilder('c')
                ->select('c,companyData, companyAttribute')
                ->leftJoin('c.companyData', 'companyData')
                ->leftJoin('companyData.companyAttribute', 'companyAttribute');
        }

        if ($term) {
            $query->andWhere('c.title LIKE :term');
            $parameters['term'] = '%' . $term . '%';
        }

        $query->setParameters($parameters);
        $query->setMaxResults(self::LIMIT);
        if (1 < $page) {
            $query->setFirstResult(self::LIMIT * $page - self::LIMIT);
        }

        return $query->getQuery()->getArrayResult();
    }

    /**
     * Return count of all Entities
     *
     * @param bool|string $isActive
     * @param bool|string $term
     * @return int
     * @internal param bool|string $options
     */
    public function countEntities($isActive, $term = false)
    {
        $parameters = [];

        if ('true' === $isActive || 'false' === $isActive) {
            if ($isActive === 'true') {
                $isActiveParam = 1;
            } else {
                $isActiveParam = 0;
            }
            $query = $this->createQueryBuilder('c')
                ->select('COUNT(c.id)')
                ->where('c.is_active = :isActiveParam');

            $parameters['isActiveParam'] = $isActiveParam;
        } else {
            $query = $this->createQueryBuilder('c')
                ->select('COUNT(c.id)');
        }

        if ($term) {
            $query->andWhere('c.title LIKE :term');
            $parameters['term'] = '%' . $term . '%';
        }

        $query->setParameters($parameters);
        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * @return array
     */
    public function getAllCompanyEntitiesWithIdAndTitle()
    {
        $query = $this->createQueryBuilder('company')
            ->select('company.id,  company.title')
            ->where('company.is_active = :isActive')
            ->setParameter('isActive', true);

        return $query->getQuery()->getArrayResult();
    }
}
