<?php

namespace API\TaskBundle\Repository;

use API\CoreBundle\Repository\RepositoryInterface;
use Doctrine\ORM\EntityRepository;

/**
 * CompanyDataRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CompanyDataRepository extends EntityRepository implements RepositoryInterface
{
    const LIMIT = 10;

    /**
     * Return's all entities with specific conditions based on actual Entity
     *
     * @param int $page
     * @param array $options
     * @return mixed
     */
    public function getAllEntities(int $page, array $options = [])
    {
        $companyId = $options['companyId'];
        $companyAttributeId = $options['companyAttributeId'];

        if ($companyId && $companyAttributeId) {
            $query = $this->createQueryBuilder('cd')
                ->select()
                ->where('cd.company = :companyId')
                ->andWhere('cd.companyAttribute = :companyAttributeId')
                ->setParameters(['companyId' => $companyId, 'companyAttributeId' => $companyAttributeId])
                ->getQuery();
        } elseif ($companyId) {
            $query = $this->createQueryBuilder('cd')
                ->select()
                ->where('cd.company = :companyId')
                ->setParameter('companyId', $companyId)
                ->getQuery();
        } elseif ($companyAttributeId) {
            $query = $this->createQueryBuilder('cd')
                ->select()
                ->where('cd.companyAttribute = :companyAttributeId')
                ->setParameter('companyAttributeId', $companyAttributeId)
                ->getQuery();
        } else {
            $query = $this->createQueryBuilder('cd')
                ->getQuery();
        };

        $query->setMaxResults(self::LIMIT);

        // Pagination calculating offset
        if (1 < $page) {
            $query->setFirstResult(self::LIMIT * $page - self::LIMIT);
        }


        return $query->getArrayResult();


    }

    /**
     * Return count of all Entities
     *
     * @param array $options
     *
     * @return int
     */
    public function countEntities(array $options = [])
    {
        $companyId = $options['companyId'];
        $companyAttributeId = $options['companyAttributeId'];

        if ($companyId && $companyAttributeId) {
            $query = $this->createQueryBuilder('cd')
                ->select('COUNT(cd.id)')
                ->where('cd.company = :companyId')
                ->andWhere('cd.companyAttribute = :companyAttributeId')
                ->setParameters(['companyId' => $companyId, 'companyAttributeId' => $companyAttributeId])
                ->getQuery();
        } elseif ($companyId) {
            $query = $this->createQueryBuilder('cd')
                ->select('COUNT(cd.id)')
                ->where('cd.company = :companyId')
                ->setParameter('companyId', $companyId)
                ->getQuery();
        } elseif ($companyAttributeId) {
            $query = $this->createQueryBuilder('cd')
                ->select('COUNT(cd.id)')
                ->where('cd.companyAttribute = :companyAttributeId')
                ->setParameter('companyAttributeId', $companyAttributeId)
                ->getQuery();
        } else {
            $query = $this->createQueryBuilder('cd')
                ->select('COUNT(cd.id)')
                ->getQuery();
        };

        return $query->getSingleScalarResult();
    }


}
